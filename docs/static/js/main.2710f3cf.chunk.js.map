{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBW,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,QCLhDG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAMJ,IACrB,kCAAMA,EAAN,W,uBCLCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAcZY,GAdY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECLwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAW,WACPjB,EAASC,GACJiB,MAAM,SAAAC,GAECH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAK1B,CAAEb,IAEEc,EDhB2BK,CAAcnB,GAAlCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIjB,UAAU,oCAAd,SAAoDI,IAElDa,GAAW,mBAAGjB,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAESA,GADCA,EAAIhB,aEmBvB2B,EAnCM,WAGjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWb,KAAK,SAACR,GAAD,OAEZ,aADA,CACC,EAAD,CAEIA,SAAYA,GADNA,Y,MCtBlCsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2710f3cf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // ''\r\n    \r\n    const handleInputChange =  (e) => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [ inputValue, ...cats  ]); \r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={ handleSubmit }>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange  }\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn animate__delay-2s'>\r\n            <img src={url} alt={ title} />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n                                                     // reemplaza los espacios por %20\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=LXgQISk6AKI5YrhhGWKNa5MEEYEDIwjj`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n};","// import React, { useEffect, useState } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFecthGifs } from \"../hooks/useFetchGifs\"\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFecthGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img)  => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFecthGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n        // los efectos no pueden ser async por que esperan algo sincrono\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false \r\n                    });\r\n\r\n            })\r\n     // si la categoria cambia se vuelve a ejecutar el useEffect \r\n    }, [ category ]);\r\n\r\n    return state; // { data: [], loading: true };\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories(['HunterXHunter', ...categories]); // se agrega antes de los elementos\r\n    //     // setCategories([...categories, 'HunterXHunter']); // se agrega despues de los elementos\r\n    //     setCategories( cats => [...cats, 'HunterXHunter']); \r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( (category) => (\r\n                        // <li key={ category } >{category}</li>\r\n                        <GifGrid \r\n                            key={ category } \r\n                            category= { category } \r\n                        />\r\n                    )) \r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}